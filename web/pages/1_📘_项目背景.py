import streamlit as st

st.title("📘 项目背景与说明")

st.markdown("""
## 问题描述
在纸卷制造业中，需要将统一长度的纸卷原料切割成不同长度，从而满足不同产品或者不同用户的需求。由于需求长度不同，切割方式有多种，而且每种切割方式所得到的子纸卷长度和数量不同，剩余的纸卷废料长度也不同。在同样满足当日需求的前提下，采用不同的切割方式消耗的原料总数不同，废弃的纸卷长度也不同，在问题规模较大时，难以确定最优的裁切方案。因此，本模型旨在探讨：如何切割，既能满足需求，又最节省原料，使得最终剩下的废弃纸卷总长度最小。

- 决策：在每天需求确定的情况下，如何进行纸卷的裁切。给出原始纸卷的裁切方案，与每个裁切方案的使用次数。
- 目标：在满足当日需求的前提下，使得当日裁切后剩余的废弃纸卷长度最小（使用的原始纸卷数量最少）。


## 问题假设
为简化并清晰描述模型，对生产场景做出如下假设：
- 每天的需求提前确定，且已知需求的纸卷长度和相应数量
- 原始纸卷长度固定且已知只有一种 (以 5450mm 为例)
- 所有需求纸卷由原始纸卷裁切得到，默认每天的产能足以保证做完当天的所有需求


## 特殊要求

- 最大切割次数：由于设备限制，一种裁切方案中最多只能进行4（可配置）次裁切，即最多裁剪为5段子纸卷
- 边损：对原纸卷而言，裁切过后，剩余下来无法供应给需求的边角料记做边损，边损可以设置上下限（如 (0, 50) ）
- 余量：对原纸卷而言，裁切过后，剩余下来可以供应给需求的边角料记做余量，余量可以设置下限（如 1500 ）
- 补库：每日裁切后多于需求部分的纸卷，都要进行补库的操作：在当日之后整个时间周期内的需求中去找，首先选择需求最高的补库，如果其需求长度超过了剩余边损，则再去选择需求第二高的，依次类推，直到剩余边损无法再补库为止
- 每天的计算结果，拟采用如下的表格格式 (注：需要特殊标注出哪些是非当天的补库纸卷)




""")

with st.expander("📥 示例输出格式"):
    st.markdown("""
| 总刀数 | 切割长度1 | 切割长度2 | 切割长度3 | 切割长度4 | 切割长度5 | 套数 | 原纸幅宽 | 余量 | 边损 |
|--------|-----------|-----------|-----------|-----------|-----------|------|--------|------|------|
| 5      | 1500      | 1800      | 2150      | -         | -         | 2    | 5450   | -    | 0    |
| 5      | 1800      | 2450      | -         | -         | -         | 1    | 5450   | 1200 | -    |
| 5      | 2250      | 2150      | -         | -         | -         | 38   | 5450   | 1000 | -    |

""")


